import com.mysql.cj.jdbc.Driver;
import java.sql.*;

public class jdbcLecture {
    public static void main(String[] args) throws SQLException {
        //instantiate the MySQL Driver to register to the built in Java Driver Manager

        Config config = new Config();

        DriverManager.registerDriver(new Driver());

        //connect to the database by providing the URL, user, and the password of the user we want to connect as.
        //lets make this safe by creating a config file to hold our username and password for us.
        Connection connection = DriverManager.getConnection(
                config.getUrl(),
                config.getUser(),
                config.getPassword()
        );

        //create a statement object to submit and execute queries.
        Statement stmt = connection.createStatement();

        //we can use the statement object to call actual SQL commands in our java files
//      stmt.execute("DELETE FROM albums WHERE id = 4");
        //returns a boolean indicating success

//        stmt.executeUpdate("INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)");
        //return the number of rows affected

//        stmt.executeQuery("SELECT * FROM albums");
        //returns a result-set object

        //we need to be able to do things with our information that's passed back
        //we can handle the results with the object we are given
        //so lets set a variable equal to our result set string then make that an instance of a resultSet object
        String selectQuery = "SELECT * FROM albums";
        ResultSet results = stmt.executeQuery(selectQuery);

        //by calling the .next() method we can iterate over the rows that our object holds
        //the method will return true as long as there are rows left in the resultSet
        //therefore, we can can use a while loop to easily cycle through the list
        while(results.next()){
            //do something with each row
            System.out.println("Here's an album:");//dataType      column name
            System.out.println("    id: " + results.getLong("id"));
            System.out.println("artist: " + results.getString("artist"));
            System.out.println("  name: " + results.getString("name"));
        }

        //INSERT QUERY
        String insertQuery = "INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)";

        //for execute Update we can have 2 arguments,
        // first is the Query string we want to execute
        // second (not required) is a constant from the statement Object.
        //This constant gives us access to the ID's that are automatically generated by the database.
        //__--__                        Instead of using the instance of the stmt object we created we call the Statemnt because it is a static constant.
        stmt.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);
        //we can then use the getGeneratedKeys() method on the resultSet object
        // which will hold any ID's generated by the database.

        //lets create a new instance of a result set and set it to the keys we called for
        ResultSet rsKeys = stmt.getGeneratedKeys();

        if(rsKeys.next()){
            System.out.println("Inserted a new record! New ID: " + rsKeys.getLong(1));
        }

    }
}
